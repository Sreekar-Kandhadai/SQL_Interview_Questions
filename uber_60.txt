Find the most profitable location. Write a query that calculates the average signup duration and average transaction amount for each location, and then compare these two measures together
by taking the ratio of the average transaction amount and average duration for each location.

Your output should include the location, average duration, average transaction amount, and ratio. Sort your results from highest ratio to lowest.

𝐒𝐜𝐡𝐞𝐦𝐚 𝐚𝐧𝐝 𝐃𝐚𝐭𝐚𝐬𝐞𝐭
CREATE TABLE cust_signups (location VARCHAR(100), plan_id BIGINT, signup_id BIGINT PRIMARY KEY, signup_start_date DATETIME, signup_stop_date DATETIME);

INSERT INTO cust_signups (location, plan_id, signup_id, signup_start_date, signup_stop_date) VALUES  ('New York', 101, 1, '2025-01-01', '2025-01-31'), ('San Francisco', 102, 2, '2025-01-05', '2025-02-05'),
('Los Angeles', 103, 3, '2025-01-10', '2025-01-20'), ('New York', 104, 4, '2025-02-01', '2025-02-28'), ('Los Angeles', 105, 5, '2025-01-15', '2025-01-25');

CREATE TABLE cust_transactions (amt FLOAT, signup_id BIGINT, transaction_id BIGINT PRIMARY KEY, transaction_start_date DATETIME);

INSERT INTO cust_transactions (amt, signup_id, transaction_id, transaction_start_date) VALUES (100.50, 1, 1001, '2025-01-10'), (200.75, 1, 1002, '2025-01-20'), (150.00, 2, 1003, '2025-01-15'), 
(300.00, 3, 1004, '2025-01-12'), (400.00, 4, 1005, '2025-02-15'), (250.00, 5, 1006, '2025-01-20');


Solution:

select * from cust_signups;
select * from cust_transactions;

# Example of using timestampdiff function
with cte as(
select a.signup_start_date,a.signup_stop_date,TIMESTAMPDIFF(day, date(a.signup_start_date),date(a.signup_stop_date)) as duration   from cust_signups a join cust_transactions b on a.signup_id=b.signup_id
)
select * from cte;

# Example of using unix_timestamp function
with cte as(
select a.signup_start_date,a.signup_stop_date, (unix_timestamp(a.signup_start_date)- unix_timestamp(a.signup_stop_date))/3600 as duration   from cust_signups a join cust_transactions b on a.signup_id=b.signup_id
)
select * from cte;

# Solution:
with cte as(
select a.location, avg(datediff(a.signup_stop_date,a.signup_start_date)) as avg_duration , avg(b.amt) as avg_amount, 
case  when avg(datediff(a.signup_stop_date,a.signup_start_date)) > 0 then avg(b.amt)/avg(datediff(a.signup_stop_date,
a.signup_start_date)) 
else 0 end as ratio
 from cust_signups a join cust_transactions b 
on a.signup_id=b.signup_id  group by a.location order by ratio desc
)
select * from cte;

